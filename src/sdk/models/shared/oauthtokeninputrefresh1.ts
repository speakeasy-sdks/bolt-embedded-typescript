/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";

/**
 * The type of OAuth 2.0 grant being utilized.
 *
 * @remarks
 *
 * The value will always be `refresh_token` when exchanging a refresh token for an access token.
 *
 */
export enum OAuthTokenInputRefreshGrantType {
    RefreshToken = "refresh_token",
}

export class OAuthTokenInputRefresh1 extends SpeakeasyBase {
    /**
     * Merchant publishable key which can be found in the merchant dashboard
     */
    @SpeakeasyMetadata({ data: "form, name=client_id" })
    clientId: string;

    /**
     * Your Bolt API Key.
     */
    @SpeakeasyMetadata({ data: "form, name=client_secret" })
    clientSecret: string;

    /**
     * The type of OAuth 2.0 grant being utilized.
     *
     * @remarks
     *
     * The value will always be `refresh_token` when exchanging a refresh token for an access token.
     *
     */
    @SpeakeasyMetadata({ data: "form, name=grant_type" })
    grantType: OAuthTokenInputRefreshGrantType;

    /**
     * The value of the refresh token issued to you in the originating OAuth token request.
     */
    @SpeakeasyMetadata({ data: "form, name=refresh_token" })
    refreshToken: string;

    /**
     * The scope issued to the merchant when receiving an authorization code. Options include `bolt.account.manage`, `bolt.account.view`, `openid`.
     */
    @SpeakeasyMetadata({ data: "form, name=scope" })
    scope: string;

    /**
     * A randomly generated string issued to the merchant when receiving an authorization code used to prevent CSRF attacks
     */
    @SpeakeasyMetadata({ data: "form, name=state" })
    state?: string;
}
