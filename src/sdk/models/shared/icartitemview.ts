/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AmountView } from "./amountview";
import { CartItemCustomization } from "./cartitemcustomization";
import { GiftOptionView } from "./giftoptionview";
import { IWeight } from "./iweight";
import { Subscription } from "./subscription";
import { Expose, Type } from "class-transformer";

export class ICartItemViewProperties extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "color" })
    color?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "display" })
    display?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    value?: string;
}

export enum ICartItemViewShipmentType {
    Unknown = "unknown",
    DoorDelivery = "door_delivery",
    ShipToStore = "ship_to_store",
    InStorePickup = "in_store_pickup",
    ShipToHomeOnly = "ship_to_home_only",
}

export enum ICartItemViewType {
    Unknown = "unknown",
    Digital = "digital",
    Physical = "physical",
    Bundled = "bundled",
}

export class ICartItemView extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "bolt_product_id" })
    boltProductId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "brand" })
    brand?: string;

    /**
     * Used to define a product category associated with the item.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "category" })
    category?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "collections" })
    collections?: string[];

    /**
     * Used to define the color of the item.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "color" })
    color?: string;

    @SpeakeasyMetadata({ elemType: CartItemCustomization })
    @Expose({ name: "customizations" })
    @Type(() => CartItemCustomization)
    customizations?: CartItemCustomization[];

    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    /**
     * Used to provide a link to the item's product page.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "details_url" })
    detailsUrl?: string;

    /**
     * Defines which gift options are hidden.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "gift_option" })
    @Type(() => GiftOptionView)
    giftOption?: GiftOptionView;

    @SpeakeasyMetadata()
    @Expose({ name: "hide" })
    hide?: boolean;

    /**
     * Used to provide a link to the image associated with the item.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "image_url" })
    imageUrl?: string;

    /**
     * Used to define the International Standard Book Number associated with the book.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "isbn" })
    isbn?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "item_group" })
    itemGroup?: string;

    /**
     * Used to define the organization that manufactured the item.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "manufacturer" })
    manufacturer?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "merchant_product_id" })
    merchantProductId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "merchant_variant_id" })
    merchantVariantId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "msrp" })
    @Type(() => AmountView)
    msrp?: AmountView;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "options" })
    options?: string;

    @SpeakeasyMetadata({ elemType: ICartItemViewProperties })
    @Expose({ name: "properties" })
    @Type(() => ICartItemViewProperties)
    properties?: ICartItemViewProperties[];

    @SpeakeasyMetadata()
    @Expose({ name: "quantity" })
    quantity?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "reference" })
    reference?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "shipment_id" })
    shipmentId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "shipment_type" })
    shipmentType?: ICartItemViewShipmentType;

    @SpeakeasyMetadata()
    @Expose({ name: "shopify_line_item_reference" })
    shopifyLineItemReference?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "shopify_product_reference" })
    shopifyProductReference?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "shopify_product_variant_reference" })
    shopifyProductVariantReference?: number;

    /**
     * Used to define the size of the item.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: string;

    /**
     * Used to define an alpha-numeric Stock Keeping Unit associated with the item as it is mapped to your internal product catalogue.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "sku" })
    sku?: string;

    /**
     * Describes a product added as a recurring subscription.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "subscription" })
    @Type(() => Subscription)
    subscription?: Subscription;

    /**
     * Used to define a comma-separated list of tags associated with the item.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "tags" })
    tags?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "tax_amount" })
    @Type(() => AmountView)
    taxAmount?: AmountView;

    @SpeakeasyMetadata()
    @Expose({ name: "taxable" })
    taxable?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "total_amount" })
    @Type(() => AmountView)
    totalAmount?: AmountView;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: ICartItemViewType;

    @SpeakeasyMetadata()
    @Expose({ name: "unit_price" })
    @Type(() => AmountView)
    unitPrice?: AmountView;

    /**
     * Used to define the unit of measure used to describe the product.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "uom" })
    uom?: string;

    /**
     * Used to define the 12-digit Universal Product Code (a barcode) associated with the item worldwide.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "upc" })
    upc?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "weight" })
    @Type(() => IWeight)
    weight?: IWeight;
}
