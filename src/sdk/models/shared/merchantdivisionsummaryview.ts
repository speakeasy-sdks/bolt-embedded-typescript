/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { MerchantDivisionLogoView } from "./merchantdivisionlogoview";
import { Expose, Type } from "class-transformer";

export enum MerchantDivisionSummaryViewHookType {
    One = "1",
    Two = "2",
    Three = "3",
    Four = "4",
    Five = "5",
    Six = "6",
}

export class MerchantDivisionSummaryView extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "account_page_url" })
    accountPageUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "api_base_domain_url" })
    apiBaseDomainUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "base_domain_url" })
    baseDomainUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "confirmation_redirect_url" })
    confirmationRedirectUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "create_order_url" })
    createOrderUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "debug_url" })
    debugUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "display_name" })
    displayName?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "get_account_url" })
    getAccountUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "hook_type" })
    hookType?: MerchantDivisionSummaryViewHookType;

    @SpeakeasyMetadata()
    @Expose({ name: "hook_url" })
    hookUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "is_universal_merchant_api" })
    isUniversalMerchantApi?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "is_webhooks_v2" })
    isWebhooksV2?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "logo" })
    @Type(() => MerchantDivisionLogoView)
    logo?: MerchantDivisionLogoView;

    @SpeakeasyMetadata()
    @Expose({ name: "logo_dashboard" })
    @Type(() => MerchantDivisionLogoView)
    logoDashboard?: MerchantDivisionLogoView;

    @SpeakeasyMetadata()
    @Expose({ name: "merchant_id" })
    merchantId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "mobile_app_domain_url" })
    mobileAppDomainUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "oauth_logout_url" })
    oauthLogoutUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "oauth_redirect_url" })
    oauthRedirectUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "platform" })
    platform?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "plugin_config_url" })
    pluginConfigUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "privacy_policy_url" })
    privacyPolicyUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "product_info_url" })
    productInfoUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "public_id" })
    publicId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "remote_apiurl" })
    remoteApiurl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "shipping_and_tax_url" })
    shippingAndTaxUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "shipping_url" })
    shippingUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "tax_url" })
    taxUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "terms_of_service_url" })
    termsOfServiceUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "universal_merchant_api_url" })
    universalMerchantApiUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "update_cart_url" })
    updateCartUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "use_async_refunds_amazon_pay" })
    useAsyncRefundsAmazonPay?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "use_async_refunds_paypal" })
    useAsyncRefundsPaypal?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "validate_additional_account_data_url" })
    validateAdditionalAccountDataUrl?: string;
}
